---
title: "L07 Strings & Regex"
subtitle: "Data Science 1 with R (STAT 301-1)"
author: "YOUR NAME"

format:
  html:
    toc: true
    embed-resources: true
    link-external-newwindow: true

execute:
  warning: false
  
from: markdown+emoji 
---

::: {.callout-tip icon=false}

## Github Repo Link

To link to your github **repo**sitory, appropriately edit the example link below. Meaning replace `https://your-github-repo-url` with your github repo url. Suggest verifying the link works before submitting.

[https://your-github-repo-url](https://your-github-repo-url)

:::

## Overview

The goal of this lab is to learn and understand string manipulation in R. Youâ€™ll learn the basics of how strings work and how to create them by hand, but the focus of this chapter will be on regular expressions, or regexps for short (regex for even shorter). Regular expressions are useful because strings usually contain unstructured or semi-structured data, and regexps are a concise language for describing patterns in strings. You'd be surprised how often you'll need to use string manipulation in R, whether for text analysis, efficiently loading data files/objects, or extracting information from the internet or standardized forms.

These resources may help:

* [`stringr` tidyverse homepage](http://stringr.tidyverse.org/articles/stringr.html)
* [regex tutorial](https://regexone.com/)
* [regex practice/game](https://regexcrossword.com/)

## Load packages

You should always begin by loading all necessary packages towards the beginning of your document.

```{r}
#| label: load-pkgs

# Loading package(s)

```

## Datasets 

All datasets are found within downloaded R packages. New packages include `stringr`,`htmlwidgets`, and `stringi`.  

## Exercises

:::{.callout-important}
The output for this assignment becomes extremely long and hinders presentation. Please set `results: hide` for your R code chunks where appropriate. Use your best judgment in deciding when to set `results: hide`. Remember that you can break the R code for exercises into many separate code chunks, so you can hide the long parts of solution output without hiding the shorter parts.
:::

### Exercise 1 

Create strings that contain the following values:

1. `He said "That's amazing!"`

2. `\a\b\c\d`

3. `\\\\\\`

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 2

Compare and contrast the results of `paste0()` with `str_c()` for the following inputs:

```{r}
#| eval: false

str_c("hi ", NA)
str_c(letters[1:2], letters[1:3])
```
    
::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 3

What's the difference between `paste()` and `paste0()`?
How can you recreate the equivalent of `paste()` with `str_c()`?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 4

Write a sentence that contains a Greek letter.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 5

Use `str_length()` and `str_sub()` to extract the middle letter from each baby name, use data `babynames::babynames`. What will you do if the string has an even number of characters?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 6

Using `babynames::babynames`, what baby name has the most vowels? What name has the highest proportion of vowels?

*Hint: what is the denominator?*

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 7

Implement a simple version of `str_to_lower()` using `str_replace_all()`.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 8

Create a regular expression that will match telephone numbers as commonly written in your country. Demonstarte a case when it matches and one where it doesn't match (an improper phone number).

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 9

How would you match the literal string `"'\`? How about `"$^$"`?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 10

Explain why each of these patterns don't match a `\`: 

a. `"\"` 
b. `"\\"`
c. `"\\\"`.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 11

Given the corpus of common words in `stringr::words`, create regular expressions that find all words that:

a.  Start with "y".
b.  Don't start with "y".
c.  End with "x".
d.  Are exactly three letters long. (Don't cheat by using `str_length()`!)
e.  Have seven letters or more.
f.  Contain a vowel-consonant pair.
g.  Contain at least two vowel-consonant pairs in a row.
h.  Only consist of repeated vowel-consonant pairs.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 12

Describe in words what these regular expressions match: (read carefully to see if each entry is a regular expression or a string that defines a regular expression.)

a.  `^.*$`
b.  `"\\{.+\\}"`
c.  `\d{4}-\d{2}-\d{2}`
d.  `"\\\\{4}"`
e.  `\..\..\..`
f.  `(.)\1\1`
g.  `"(..)\\1"`
    
::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


### Exercise 13

For each of the following challenges, try solving it by using both a single regular expression, and a combination of multiple `str_detect()` calls.

a. Find all `words` that start or end with `x`.
b. Find all `words` that start with a vowel and end with a consonant.
c. Are there any `words` that contain at least one of each different vowel?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


### Exercise 14

Construct patterns to find evidence for and against the rule "i before e except after c"?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


## Case Study

Use the `tinder_profile` file in the `data` subdirectory to complete the tasks below.^[This dataset was sourced from [Swipestats.io](https://www.swipestats.io/).]

The raw data file was a MESS! Luckily, a lot of it was pre-cleaned before it got to you but there are still a few variables that need some help. Display the code used to complete the tasks.

- Obtain the count of users that display their `school` on their profile
- Obtain the count of users that display their `job` on their profile

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

## Graduate Challenge

::: callout-important

Graduate students are required to complete this challenge. **It is optional for undergraduate students.**

:::

Create a new column in the dataset where you extract the name of either the school or job title from `schools` or `jobs`, respectively. 
